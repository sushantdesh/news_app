{"version":3,"sources":["Components/Newsitem.js","Components/News.js","Components/Header.js","Components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Newsitem","this","props","article","title","source","name","urlToImage","src","alt","style","maxWidth","author","publishedAt","description","content","React","Component","News","getStyle","border","padding","background","margin","width","borderRadius","console","log","newsarticles","map","Header","textAlign","Filter","getbuttonstyle","cursor","selectedCountry","onClick","category","bind","type","App","state","r","fetch","then","res","json","data","setState","newsfromapi","catch","status","articles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.deb5031e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nclass Newsitem extends React.Component{\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n<div >\r\n            <h2>{this.props.article.title}</h2>\r\n    <h3>from {this.props.article.source.name}</h3>\r\n\r\n    {this.props.article.urlToImage ? <img src={this.props.article.urlToImage} alt=\"image not loaded\" style={{maxWidth:\"30%\"}}/> : null}\r\n    {this.props.article.author ? <p><p>author :{this.props.article.author}</p>\r\n        <p> published at : {this.props.article.publishedAt}</p> </p>:\r\n        <p>published at : {this.props.article.publishedAt}</p>}\r\n    <p>{this.props.article.description}</p>\r\n\r\n    <p>{this.props.article.content}</p>\r\n</div>\r\n        )\r\n    }\r\n}\r\nexport default Newsitem;","import React from \"react\";\r\nimport Newsitem from \"./Newsitem\";\r\nclass News extends React.Component{\r\n    getStyle= {\r\n        border: '3px solid green',\r\n        padding: '10px',\r\n        background: 'white',margin:'auto',width:'70%',\r\n        borderRadius:'20px'\r\n\r\n    }\r\n    render() {\r\n        console.log(\"from news\",this.props.newsarticles)\r\n        return this.props.newsarticles.map((article)=>(\r\n            <div style={this.getStyle}>\r\n            <Newsitem article={article}/>\r\n                {'  '}\r\n            </div>\r\n        ))\r\n    }\r\n}\r\nexport default News;","import React from \"react\";\r\n\r\nfunction Header(){\r\n    return(\r\n        <h1 style={{textAlign:'center'}}>News App in React</h1>\r\n    )\r\n}\r\nexport default Header;","import React from \"react\";\r\n\r\nclass Filter extends React.Component{\r\n        getStyle= {\r\n    border: '3px solid green',\r\n    padding: '10px',\r\n    background: 'f8f8ff',margin:'auto',width:'70%',\r\n            borderRadius: '10px'\r\n}\r\ngetbuttonstyle={\r\n            borderRadius:'12px',\r\n            background: 'lightblue',\r\n            cursor:'pointer'\r\n}\r\nselectedCountry='R'\r\n    render() {\r\n        return(\r\n           <div style={this.getStyle}>\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=business')}>Bussiness</button> {' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=entertainment')}>Entertainment</button>{' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=general')}>General</button>{' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=health')}>Health</button>{' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=science')}>Science</button>{' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=sports')}>Sports</button>{' '}\r\n               <button style={this.getbuttonstyle} onClick={this.props.category.bind(this,'category=technology')}>Technology</button> {'  '}\r\n\r\n\r\n               <input type=\"textfield\" ></input>\r\n           </div>\r\n        )\r\n    }\r\n}\r\nexport default Filter;","import React from 'react';\nimport News from './Components/News.js'\nimport Header from \"./Components/Header\";\nimport Filter from \"./Components/Filter\";\n\nclass App extends React.Component{\n    state={}\n\n  componentDidMount() {\n    fetch('https://newsapi.org/v2/top-headlines?country=us&apiKey=29bae5c10b734c0e98ec58a6d640b817')\n        .then(res=>res.json())\n        .then((data)=>{\n          this.setState(({newsfromapi:data}))\n        })\n        .catch()\n  }\n  category=(r)=>{\n        console.log(r)\n        let baseurl='https://newsapi.org/v2/top-headlines?country=us&'\n      let apikey='&apiKey=29bae5c10b734c0e98ec58a6d640b817'\n      let complete=baseurl+r+apikey\n      fetch(complete)\n          .then(res=>res.json())\n          .then((data)=>{\n              this.setState(({newsfromapi:data}))\n          })\n          .catch()\n\n}\n\n  render() {\n      console.log(\"here\", this.state.newsfromapi);\n\n      return (\n          <div >\n              <Header/>\n              <Filter category={this.category}/>\n\n              {this.state.newsfromapi && this.state.newsfromapi.status===\"ok\" ?\n              <News newsarticles={this.state.newsfromapi.articles}/> : null}\n\n          </div>\n\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}